{"version":3,"sources":["../node_modules/regenerator-runtime/runtime.js","scripts/main.js"],"names":["url","tableTitles","drawGraph","data","canvas","document","createElement","setAttribute","graphDiv","getElementById","append","canvasElemt","config","type","labels","datasets","label","skipNull","scales","offset","menChart","Chart","deleteGraph","graph","remove","getGraphData","age20","age30","age40","age50","age60","age70","groupsMan","i","results","length","age","dob","push","addCell","row","text","cell","insertCell","innerText","addRow","tbl","querySelector","insertRow","name","first","last","location","city","drawTable","titles","table","tableDiv","forEach","title","th","appendChild","createTextNode","deleteTable","getTableData","sortAge","sort","a","b","slice","loaderDiv","displayLoading","className","hideLoading","imgDiv","addImg","performance","navigation","TYPE_RELOAD","count","parseInt","localStorage","getItem","setItem","downloadData","apiUrl","fetch","response","json","main","dataGraph","dataTable","button","addEventListener"],"mappings":"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ACVC;ADWD;AACA,ACVA,IAAIE,YAAY,CAACC,OAAb,CAAqB,SAArB,IAAkC,CAAlC,KAAwC,CAA5C,EAA+C;ADW/C,ACVIP,EAAAA,MAAM;ADWV,ACVC;ADWD;AACA,ACZC,EAED;ADWA;AACA,SCXeS;ADYf;AACA,ECLA;ADMA;AACA;AACA;AACA,0ECjBA,kBAA4BC,MAA5B;ADkBA,AClBA;ADmBA,ACnBA;ADoBA,ACpBA;ADqBA,ACrBA;ADsBA,ACtBA;ADuBA,ACtBEd,YAAAA,cAAc;ADuBhB,ACxBA;ADyBA,ACzBA,mBAEyBe,KAAK,CAACD,MAAD,CAF9B;AD0BA;AACA,AC3BA;AD4BA,AC1BQE,YAAAA,QAFR;AD6BA,AC7BA;AD8BA,AC9BA,mBAGqBA,QAAQ,CAACC,IAAT,EAHrB;AD+BA;AACA,AChCA;ADiCA,AC9BQrF,YAAAA,IAHR;ADkCA,AC9BEsE,YAAAA,WAAW;AD+Bb,ACnCA,8CAKStE,IALT;ADoCA;AACA,ACrCA;ADsCA,ACtCA;ADuCA,ACvCA;ADwCA,ACxCA;ADyCA,ACzCA;AD0CA,AC1CA;AD2CA,AC3CA;AD4CA;AACA;AACA;AACA,SCtCesF;ADuCf;AACA,EChCA;ADiCA;AACA;AACA;AACA,kEC5CA;AD6CA,AC7CA;AD8CA,AC9CA;AD+CA,AC/CA;ADgDA,AChDA;ADiDA,ACjDA;ADkDA,AClDA;ADmDA,ACnDA,mBACqBL,YAAY,CAACpF,GAAD,CADjC;ADoDA;AACA,ACrDA;ADsDA,ACrDQG,YAAAA,IADR;ADuDA,ACrDQuF,YAAAA,SAFR,GAEoBjE,YAAY,CAACtB,IAAD,CAFhC;ADwDA,ACrDED,YAAAA,SAAS,CAACwF,SAAD,CAAT;ADsDF,ACrDQC,YAAAA,SAJR,GAIoB3B,YAAY,CAAC7D,IAAD,CAJhC;AD0DA,ACrDEmD,YAAAA,SAAS,CAACqC,SAAD,EAAY1F,WAAZ,CAAT;ADsDF;AACA,AC5DA;AD6DA,AC7DA;AD8DA,AC9DA;AD+DA,AC/DA;ADgEA,AChEA;ADiEA,ACjEA;ADkEA,AClEA;ADmEA;AACA;AACA;AACA,AC7DA,IAAM2F,MAAM,GAAGvF,QAAQ,CAAC0C,aAAT,CAAuB,MAAvB,CAAf;AD8DA,AC7DA6C,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiC,YAAM;AD8DvC,AC5DE,MAAIxF,QAAQ,CAACI,cAAT,CAAwB,OAAxB,CAAJ,EAAsC;AD6DxC,AC5DIa,IAAAA,WAAW;AD6Df,AC5DG;AD6DH;AACA,AC5DE,MAAIjB,QAAQ,CAACI,cAAT,CAAwB,OAAxB,CAAJ,EAAsC;AD6DxC,AC5DIsD,IAAAA,WAAW;AD6Df,AC5DG;AD6DH;AACA,AC5DE,0DAAC;AD6DH,AC7DG;AD8DH,AC9DG;AD+DH,AC/DG;ADgEH,AChEG;ADiEH,ACjEG;ADkEH,AClEG,mBACS0B,IAAI,EADb;ADmEH;AACA,ACpEG;ADqEH,ACrEG;ADsEH,ACtEG;ADuEH,ACvEG;ADwEH,ACxEG;ADyEH,ACzEG;AD0EH,AC1EG,GAAD;AD2EF,ACvEC,CAdD;ADsfile":"main.d8ebb8d6.js","sourceRoot":"..\\app","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","import 'regenerator-runtime/runtime';\n\nconst url = \"https://randomuser.me/api/?gender=male&nat=fr&results=1000\";\nconst tableTitles = [\"First Name\", \"Last Name\", \"Age\", \"City\"];\n\n//create graph\nfunction drawGraph(data) {\n  const canvas = document.createElement(\"canvas\");\n  canvas.setAttribute(\"id\", \"chart\");\n  const graphDiv = document.getElementById(\"graphDiv\");\n  graphDiv.append(canvas);\n  const canvasElemt = document.getElementById(\"chart\");\n\n  const config = {\n    type: \"bar\",\n    data: {\n      labels: [\"20-29\", \"30-39\", \"40-49\", \"50-59\", \"60-69\", \"70-79\"],\n      datasets: [\n        {\n          label: \"Number of men at a certain age\",\n          data: [...data],\n          skipNull: true,\n          scales: {\n            offset: true,\n          },\n        },\n      ],\n    },\n  };\n\n  const menChart = new Chart(canvasElemt, config);\n}\n\nfunction deleteGraph() {\n  const graph = document.getElementById(\"chart\");\n  graph.remove();\n}\n\nfunction getGraphData(data) {\n  let age20 = 0;\n  let age30 = 0;\n  let age40 = 0;\n  let age50 = 0;\n  let age60 = 0;\n  let age70 = 0;\n  let groupsMan = [];\n\n  for (let i = 0; i < data.results.length; i++) {\n    let age = data.results[i].dob.age;\n    if (age >= 20 && age < 30) {\n      age20++;\n    } else if (age >= 30 && age < 40) {\n      age30++;\n    } else if (age >= 40 && age < 50) {\n      age40++;\n    } else if (age >= 50 && age < 60) {\n      age50++;\n    } else if (age >= 60 && age < 70) {\n      age60++;\n    } else {\n      age70++;\n    }\n  }\n\n  groupsMan.push(age20, age30, age40, age50, age60, age70);\n\n  return groupsMan;\n}\n\n//create table\nfunction addCell(row, text) {\n  const cell = row.insertCell();\n  cell.innerText = text;\n}\n\nfunction addRow(data) {\n  const tbl = document.querySelector(\"#table\");\n  const row = tbl.insertRow();\n  addCell(row, data.name.first);\n  addCell(row, data.name.last);\n  addCell(row, data.dob.age);\n  addCell(row, data.location.city);\n}\n\nfunction drawTable(data, titles) {\n  const table = document.createElement(\"table\");\n  table.setAttribute(\"id\", \"table\");\n  const tableDiv = document.getElementById(\"tableDiv\");\n\n  titles.forEach((title) => {\n    let th = document.createElement(\"th\");\n    th.appendChild(document.createTextNode(title));\n    table.append(th);\n  });\n\n  tableDiv.append(table);\n\n  for (let i = 0; i < 10; i++) {\n    addRow(data[i]);\n  }\n}\n\nfunction deleteTable() {\n  const table = document.getElementById(\"table\");\n  table.remove();\n}\n\nfunction getTableData(data) {\n  const sortAge = data.results\n    .sort((a, b) => b.dob.age - a.dob.age)\n    .slice(0, 10);\n  return sortAge;\n}\n\n//create loader\nconst loaderDiv = document.querySelector(\"#placeholder\");\n\nfunction displayLoading() {\n  loaderDiv.className = \"loading\";\n}\n\nfunction hideLoading() {\n  loaderDiv.className = \"placeholder\";\n}\n\n//adding img to second part of text\nconst imgDiv = document.getElementById(\"secondParDiv\");\n\nfunction addImg() {\n  imgDiv.className = \"addImg\";\n}\n\nif (performance.navigation.type == performance.navigation.TYPE_RELOAD) {\n    let count = parseInt(localStorage.getItem('counter') || 0);\n    localStorage.setItem('counter', ++count)\n}\n\nif (localStorage.getItem('counter') % 5 === 0) {\n    addImg();\n};\n\n//download API\nasync function downloadData(apiUrl) {\n  displayLoading();\n  const response = await fetch(apiUrl);\n  const data = await response.json();\n  hideLoading();\n  return data;\n}\n\n//get data and draw table nad graph\nasync function main() {\n  const data = await downloadData(url);\n  const dataGraph = getGraphData(data);\n  drawGraph(dataGraph);\n  const dataTable = getTableData(data);\n  drawTable(dataTable, tableTitles);\n}\n\n//add function to the button\nconst button = document.querySelector(\"#btn\");\nbutton.addEventListener(\"click\", () => {\n\n  if (document.getElementById(\"chart\")) {\n    deleteGraph();\n  }\n\n  if (document.getElementById(\"table\")) {\n    deleteTable();\n  }\n  \n  (async () => { \n      await main();\n    })();\n\n});\n"]}